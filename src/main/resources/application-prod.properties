# Storing sensitive information such as production environment URLs, usernames, passwords and API keys directly in application.properties
# files is not recommended due to security concerns. Instead, you can use various techniques to manage and secure sensitive information:
# Environment Variables: Store sensitive information as environment variables on the server where the application is deployed.
#    Retrieve these values in your application code using libraries like Spring's @Value annotation or System.getenv() in Java.
# Secret Management Tools: Use dedicated secret management tools like HashiCorp Vault, AWS Secrets Manager,
#    or Google Cloud Secret Manager to securely store and manage sensitive information.
# External Configuration Files: Store sensitive information in external configuration files outside the application codebase.
# Encrypted Properties Files: Encrypt sensitive properties files using tools like Jasypt or Spring Cloud Config Server with encryption enabled.
# Key Management Services (KMS): Utilize Key Management Services provided by cloud providers like AWS Key Management Service (KMS), Azure Key Vault or Google Cloud KMS to manage encryption keys.
# Note: Azure Key Vault functions as both a Secret Management Tool and a Key Management Service (KMS)
spring.datasource.url=jdbc:postgresql://localhost:5432/accounting-prod
spring.datasource.username=postgres
spring.datasource.password=admin

# When spring.devtools.add-properties is set to true, Spring Boot Developer Tools adds additional properties to the Spring Environment.
# These properties are often related to configuring developer-specific behavior, such as automatic restarts, remote debugging, and other development-related features.
# This property is typically used during development and debugging phases and may not be necessary or desirable in production environments.
# Therefore, it's often set to false in production configurations to avoid unnecessary overhead and potential security risks.
spring.devtools.add-properties=false

# to tell jpa which database to work
spring.sql.init.data-locations=classpath:data-prod.sql

# for any script-based initialization, i.e. inserting data via data.sql or creating schema via schema.sql,
# we should uncomment this (its default value is never)
# ALWAYS: always initialize the database
# EMBEDDED: always initialize if an embedded database is in use. This is the default if the property value is not specified.
# NEVER: never initialize the database
# (config below should be "always" only for first run of a production environment)
spring.sql.init.mode=never

server.port=8081