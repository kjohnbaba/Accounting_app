# Used to specify which profiles should be active when running a Spring Boot application.
# This property allows us to control which configuration files (such as application-dev.properties for development,
# application-prod.properties for production, etc.), beans, and other resources are loaded based on the active profiles.
# We can also specify multiple profiles by separating them with commas.
spring.profiles.active=dev

spring.datasource.url=jdbc:postgresql://localhost:5432/accounting
spring.datasource.username=postgres
spring.datasource.password=admin

spring.web.locale=en_US

# to see sql statements on our console when running app
spring.jpa.show-sql=false

# to tell jpa which database to work:
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

# If we are using script-based initialization, i.e. through schema.sql, we should set this to "none".
# Using schema.sql and also Hibernate initialization, can cause some issues.
# If the ddl-auto value is UPDATE then, hibernate checks for the table and columns. If a table does not exist,
# then it creates new tables and whereas if a column does not exist it creates new columns for it.
# If spring.jpa.hibernate.ddl-auto=create , and we don't have these tables in database, it throws error in first run
# but also creates related tables, other runs doesn't throw error. # update works as expected
# CREATE:  Hibernate first drops existing tables and then creates new tables.
# UPDATE: The object model created based on the mappings (annotations or XML) is compared with the existing schema,
# and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no longer required by the application.
# CREATE-DROP: similar to create, with the addition that Hibernate will drop the database after all operations are completed; typically used for unit testing
# VALIDATE: Hibernate only validates whether the tables and columns exist; otherwise, it throws an exception.
# NONE: This value effectively turns off the DDL generation.
# Spring Boot internally defaults this parameter value to create-drop if no schema manager has been detected, otherwise none for all other cases.
spring.jpa.hibernate.ddl-auto=create

# If we still want to have both Hibernate automatic schema generation in conjugation with script-based schema creation
# and data population, we should set this to "true". This will ensure that after Hibernate schema creation is performed,
# then additionally schema.sql is read for any additional schema changes, and further data.sql is executed to populate the database.
# To be able to create table via @Entity before loading data via data.sql file:
spring.jpa.defer-datasource-initialization=true

# for any script-based initialization, i.e. inserting data via data.sql or creating schema via schema.sql,
# we should uncomment this (its default value is never)
# ALWAYS: always initialize the database
# EMBEDDED: always initialize if an embedded database is in use. This is the default if the property value is not specified.
# NEVER: never initialize the database
spring.sql.init.mode=always

# to tell jpa which database to work
spring.sql.init.data-locations=classpath:data-dev.sql

# When spring.devtools.add-properties is set to true, Spring Boot Developer Tools adds additional properties to the Spring Environment.
# These properties are often related to configuring developer-specific behavior, such as automatic restarts, remote debugging, and other development-related features.
# This property is typically used during development and debugging phases and may not be necessary or desirable in production environments.
# Therefore, it's often set to false in production configurations to avoid unnecessary overhead and potential security risks.
spring.devtools.add-properties=true

# The logging levels typically range from least verbose to most verbose, and options are ERROR, WARN, INFO, DEBUG, and TRACE
# The root logger is the ancestor of all other loggers in the logging hierarchy.
logging.level.root=INFO
# Allows to specify the logging level for HTTP requests, responses, and other web-related activities.
logging.level.web=WARN
# Allows to specify the logging level for SQL queries, database connections, and other database-related operations.
logging.level.sql=ERROR

#api.currency.url = https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/latest/currencies/usd.json # old url
api.currency.url=https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies
api.countryDropDown.url=https://www.universal-tutorial.com/
api.country.mail=iqq87@yahoo.com
api.country.token=2GoRDd71HYqmpQ3qPL3zb6Z2Kwpc53y9fJIDJkte9hoPHq8dJZMY871oLy6YMdp0UDo

stripe_public_key=pk_test_51KnhIOBgDORgSOemdQrmPrYHIZ1HF6FXwpqhBFJ6MbVK2fLXIMSNzfPs11D3QZQnoUMk5MvsYbrznwj44VEojsAm00x2ViHUZT
stripe_secret_key=sk_test_51KnhIOBgDORgSOemupAaZ34jhzUzHk1h27LfoiJU4CispEYiKiqLkQUXKpQt6F6Z74BLy6rmpGO2j7okscRTjNPf00Vg4wyvgQ
# the account to use the test card number 4242 4242 4242 4242, a random three-digit CVC number, and any expiration date in the future.